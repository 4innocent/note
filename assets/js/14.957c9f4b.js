(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{414:function(e,r,l){"use strict";l.r(r);var v=l(56),t=Object(v.a)({},(function(){var e=this,r=e.$createElement,l=e._self._c||r;return l("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[l("h1",{attrs:{id:"docker"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#docker"}},[e._v("#")]),e._v(" Docker")]),e._v(" "),l("h2",{attrs:{id:"介绍"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#介绍"}},[e._v("#")]),e._v(" 介绍")]),e._v(" "),l("p",[e._v("docker三要素：镜像、容器、仓库。")]),e._v(" "),l("ul",[l("li",[e._v("镜像：一个只读模板，用来创建docker容器")]),e._v(" "),l("li",[e._v("容器：容器为镜像提供了一个安全、隔离的运行环境，容器可以启动、开始、停止、删除")]),e._v(" "),l("li",[e._v("仓库：集中存放容器的地方")])]),e._v(" "),l("h2",{attrs:{id:"安装"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#安装"}},[e._v("#")]),e._v(" 安装")]),e._v(" "),l("p",[l("a",{attrs:{href:"https://docs.docker.com/engine/install/",target:"_blank",rel:"noopener noreferrer"}},[e._v("安装docker"),l("OutboundLink")],1)]),e._v(" "),l("h2",{attrs:{id:"常用命令"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#常用命令"}},[e._v("#")]),e._v(" 常用命令")]),e._v(" "),l("h3",{attrs:{id:"启动类命令"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#启动类命令"}},[e._v("#")]),e._v(" 启动类命令")]),e._v(" "),l("ul",[l("li",[e._v("systemctl start docker\n"),l("ul",[l("li",[e._v("启动docker")])])]),e._v(" "),l("li",[e._v("systemctl stop docker\n"),l("ul",[l("li",[e._v("停止docker")])])]),e._v(" "),l("li",[e._v("systemctl restart docker\n"),l("ul",[l("li",[e._v("重启docker")])])]),e._v(" "),l("li",[e._v("systemctl enable docker\n"),l("ul",[l("li",[e._v("开机自启动docker")])])]),e._v(" "),l("li",[e._v("systemctl status docker\n"),l("ul",[l("li",[e._v("查看docker服务状态信息")])])]),e._v(" "),l("li",[e._v("docker info\n"),l("ul",[l("li",[e._v("查看docker概要信息")])])]),e._v(" "),l("li",[e._v("docker --help\n"),l("ul",[l("li",[e._v("查看docker帮助")])])]),e._v(" "),l("li",[e._v("docker 命令 --help\n"),l("ul",[l("li",[e._v("查看命令帮助")])])])]),e._v(" "),l("h3",{attrs:{id:"镜像类命令"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#镜像类命令"}},[e._v("#")]),e._v(" 镜像类命令")]),e._v(" "),l("ul",[l("li",[e._v("docker images\n"),l("ul",[l("li",[e._v("列出docker中的镜像，-a显示本地所有镜像，-q只显示镜像ID")])])]),e._v(" "),l("li",[e._v("docker search 镜像\n"),l("ul",[l("li",[e._v("查看仓库中是否有该镜像")])])]),e._v(" "),l("li",[e._v("docker pull 镜像[:tag]\n"),l("ul",[l("li",[e._v("拉去镜像[指定版本]")])])]),e._v(" "),l("li",[e._v("docker system df\n"),l("ul",[l("li",[e._v("查看docker镜像/容器/数据卷所占空间")])])]),e._v(" "),l("li",[e._v("docker rmi 镜像\n"),l("ul",[l("li",[e._v("删除镜像，多个镜像以空格隔开")])])])]),e._v(" "),l("h3",{attrs:{id:"容器命令"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#容器命令"}},[e._v("#")]),e._v(" 容器命令")]),e._v(" "),l("ul",[l("li",[e._v("docker run 镜像\n"),l("ul",[l("li",[e._v("以该镜像添加一个容器实例\n"),l("ul",[l("li",[e._v("--name：为容器设置一个名字")]),e._v(" "),l("li",[e._v("-i：以交互命令运行，通常与-t配合使用")]),e._v(" "),l("li",[e._v("-t：重新生成一个终端")]),e._v(" "),l("li",[e._v("-p [port]:[port]：指定端口映射")]),e._v(" "),l("li",[e._v("-P：随机端口映射")]),e._v(" "),l("li",[e._v("-d：以守护线程方式启动")])])])])]),e._v(" "),l("li",[e._v("docker ps\n"),l("ul",[l("li",[e._v("列出docker运行的实例\n"),l("ul",[l("li",[e._v("-a：列出正在运行和曾经运行的容器")]),e._v(" "),l("li",[e._v("-l：显示最近创建的容器")]),e._v(" "),l("li",[e._v("-n：显示最近创建的n个容器")]),e._v(" "),l("li",[e._v("-q：只显示容器编号")])])])])]),e._v(" "),l("li",[e._v("docker restart 容器编号或名字\n"),l("ul",[l("li",[e._v("启动已经停止容器，或者重启容器")])])]),e._v(" "),l("li",[e._v("docker stop 容器编号或名字\n"),l("ul",[l("li",[e._v("停止容器")])])]),e._v(" "),l("li",[e._v("docker kill 容器编号或名字\n"),l("ul",[l("li",[e._v("强制停止容器")])])]),e._v(" "),l("li",[e._v("docker rm 容器编号或名字\n"),l("ul",[l("li",[e._v("删除已经停止的容器")])])]),e._v(" "),l("li",[e._v("docker logs 容器编号\n"),l("ul",[l("li",[e._v("查看容器实例运行日志")])])]),e._v(" "),l("li",[e._v("docker top 容器编号\n"),l("ul",[l("li",[e._v("相当于在容器内部执行top")])])]),e._v(" "),l("li",[e._v("docker inspect 容器编号\n"),l("ul",[l("li",[e._v("查看docker内部细节，json形式")])])]),e._v(" "),l("li",[e._v("docker exec -it 容器编号 bash\n"),l("ul",[l("li",[e._v("重新进入容器并打开一个伪终端，退出后不会关闭容器")])])]),e._v(" "),l("li",[e._v("docker cp 容器编号:文件路径>拷贝目的地\n"),l("ul",[l("li",[e._v("拷贝容器中的文件到本地")])])]),e._v(" "),l("li",[e._v("docker export 容器编号 > 文件名.tar\n"),l("ul",[l("li",[e._v("将容器导出为一个tar文件，对应import")])])]),e._v(" "),l("li",[e._v("cat 文件名.tar | docker import - 镜像用户名/镜像名字:镜像版本号\n"),l("ul",[l("li",[e._v("将tar文件导入生成一个镜像，保留之前容器的所有信息")])])]),e._v(" "),l("li",[e._v('docker commit -m="镜像描述信息" -a="镜像作者" 容器编号 要创建的镜像名称:镜像版本号\n'),l("ul",[l("li",[e._v("生成一个镜像文件")])])])]),e._v(" "),l("h2",{attrs:{id:"容器数据卷"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#容器数据卷"}},[e._v("#")]),e._v(" 容器数据卷")]),e._v(" "),l("p",[e._v("容器数据卷能够持久化容器内的数据，在容器意外关闭时防止数据丢失，宿主机和容器能够共享数据卷内数据。运行一个带有数据卷的容器命令为：")]),e._v(" "),l("div",{staticClass:"language-docker extra-class"},[l("pre",{pre:!0,attrs:{class:"language-docker"}},[l("code",[l("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# ro read only 容器只能读")]),e._v("\n"),l("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# rw read write 容器可读写，默认规则")]),e._v("\ndocker run -it --privileged=true -v /宿主机绝对路径目录:容器内目录:[ro|rw] 镜像名称\n")])])]),l("p",[e._v("可以通过"),l("code",[e._v("docker inspect 容器id或名字")]),e._v("查看数据卷是否映射正确。")]),e._v(" "),l("div",{staticClass:"language- extra-class"},[l("pre",{pre:!0,attrs:{class:"language-text"}},[l("code",[e._v('"Mounts": [\n    {\n        "Type": "bind",\n        "Source": "/temp/redis-data", \n        "Destination": "/temp/redis-data",\n        "Mode": "",\n        "RW": true,\n        "Propagation": "rprivate"\n    },\n],\n')])])]),l("p",[e._v("容器也可以继承其他容器的数据卷规则")]),e._v(" "),l("div",{staticClass:"language-docker extra-class"},[l("pre",{pre:!0,attrs:{class:"language-docker"}},[l("code",[e._v("docker run -d --name=u2 --privileged=true --volumes-form=夫容器 镜像名字\n")])])]),l("h2",{attrs:{id:"docker-file"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#docker-file"}},[e._v("#")]),e._v(" Docker File")]),e._v(" "),l("p",[e._v("docker file就是执行文件中的相关指令生成一个定制的镜像，进而简化配置镜像过程")]),e._v(" "),l("h3",{attrs:{id:"保留字"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#保留字"}},[e._v("#")]),e._v(" 保留字")]),e._v(" "),l("ul",[l("li",[e._v("FROM\n"),l("ul",[l("li",[e._v("生成的镜像文件是基于哪一个镜像")])])]),e._v(" "),l("li",[e._v("MAINTAINER\n"),l("ul",[l("li",[e._v("镜像的作者信息")])])]),e._v(" "),l("li",[e._v("RUN\n"),l("ul",[l("li",[e._v("镜像构建时需要执行的命令，支持bash和exec，在build时执行")])])]),e._v(" "),l("li",[e._v("EXPOSE\n"),l("ul",[l("li",[e._v("当前容器监听的端口，要做端口映射需要使用-p")])])]),e._v(" "),l("li",[e._v("WORKDIR\n"),l("ul",[l("li",[e._v("镜像在容器内部的工作目录")])])]),e._v(" "),l("li",[e._v("ENV\n"),l("ul",[l("li",[e._v("在构建过程中设置环境变量")])])]),e._v(" "),l("li",[e._v("VOLUME\n"),l("ul",[l("li",[e._v("设置数据卷")])])]),e._v(" "),l("li",[e._v("ADD\n"),l("ul",[l("li",[e._v("将宿主机下的文件拷贝进镜像并且会自动处理url路径并解压")])])]),e._v(" "),l("li",[e._v("COPY\n"),l("ul",[l("li",[e._v("将文件copy进镜像目录")])])]),e._v(" "),l("li",[e._v("CMD\n"),l("ul",[l("li",[e._v("指定镜像创建容器后执行的命令，支持bash和exec两种格式，多个CMD指令只执行最后一个，docker run后的参数会覆盖CMD中的指令")]),e._v(" "),l("li",[e._v("RUN指令在build时执行，CMD指令在run时执行")])])]),e._v(" "),l("li",[e._v("ENTRYPOINT\n"),l("ul",[l("li",[e._v("功能和CMD类似，但是有ENTRYPOINT时CMD只当传递参数使用，他们两个的组合会变成[ENTRYPOINT] [CMD]，此外ENTRYPOINT的执行的命令不会被docker run传入参数覆盖，但是还是会覆盖CMD命令，此时CMD类似默认参数")])])])]),e._v(" "),l("h3",{attrs:{id:"使用docker-file文件"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#使用docker-file文件"}},[e._v("#")]),e._v(" 使用Docker File文件")]),e._v(" "),l("p",[e._v("默认不指定名字时，文件名字需要为Dockerfile。")]),e._v(" "),l("div",{staticClass:"language-shell extra-class"},[l("pre",{pre:!0,attrs:{class:"language-shell"}},[l("code",[l("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#根据指定path下的docker file生成镜像并指定tag名字，path为.表示当前目录为build上下文")]),e._v("\n"),l("span",{pre:!0,attrs:{class:"token function"}},[e._v("docker")]),e._v(" build -t tag path\n")])])]),l("h2",{attrs:{id:"docker的网络模式"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#docker的网络模式"}},[e._v("#")]),e._v(" docker的网络模式")]),e._v(" "),l("p",[e._v("可以使用"),l("code",[e._v("docker network --help")]),e._v("来查看docker的网络信息。  docker常用的网络模式有bridge和host，区别在于bridge模式会在容器内创建虚拟的ip和端口，host直接使用主机的ip和端口。")]),e._v(" "),l("p",[e._v("要设置docker的net模式可以在启动容器实例时通过"),l("code",[e._v("--net host")]),e._v("设置")]),e._v(" "),l("h2",{attrs:{id:"compose容器编排"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#compose容器编排"}},[e._v("#")]),e._v(" compose容器编排")]),e._v(" "),l("p",[e._v("docker compose能够管理多个docker实例，规定他们的启动顺序，一起启动，一起停止，方便管理大规模docker实例。具体可以参考官网用法"),l("a",{attrs:{href:"https://docs.docker.com/get-started/08_using_compose/",target:"_blank",rel:"noopener noreferrer"}},[e._v("compose用法"),l("OutboundLink")],1)])])}),[],!1,null,null,null);r.default=t.exports}}]);